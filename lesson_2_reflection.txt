1. What happens when you initialize a repository? Why do you need to do it?

It will show the following information:

On branch master

Initial commit

Untracked files:
  (use "git add <file>..." to include in what will be committed)

	.DS_Store
	lesson_1_reflection.txt
	lesson_2_reflection.txt

nothing added to commit but untracked files present (use "git add" to track)

2. How is the staging area different from the working directory and the repository?
What value do you think it offers?

Staging area is like a buffer between working directory and repository. In staging area, we can make commit to several related files at one time. We can also unstage the file in order to go back to working directory.

3. How can you use the staging area to make sure you have one commit per logical
change?

If two or three files are closely related to each other, then I will put all of them to staging area at first, and then make one commit which contains all three files.

4. What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

When you don't want to touch the main branch profile, but still would like to make some changes. Branches help you keep the main branch profile as well as creating versions with changes.

5. How do the diagrams help you visualize the branch structure?

It helps me to see different branches so I could easily figure out the timeline of all commits. I could figure out why one commit could not be touched by another commit. I could also see which commit I am currenly running.

6. What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

The result is that there will be only one branch. We represent it in the diagram so that we can clearly see the commits that are merged together.

7. What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

When git merges branches automatically, it means there is no conflict so we don't need to rethink about the code. However, the logic may not be perfect. When we do it manually, we rethink about the code and keep the most logical version. On the other hand, it's more time consuming when doing merge manually.
